// Kin Workspace E-commerce Database Schema
// Shared schema with CMS for unified data management

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users and Authentication (shared with CMS)
model User {
  id           String   @id @default(uuid()) @db.Uuid
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  name         String   @db.VarChar(255)
  role         UserRole @default(EDITOR)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // E-commerce specific relations
  wishlistItems WishlistItem[]
  reviews       Review[]
  orders        Order[]

  @@map("users")
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
  CUSTOMER
}

// Content Categories (shared with CMS)
model Category {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @db.VarChar(255)
  slug        String    @unique @db.VarChar(255)
  description String?   @db.Text
  parentId    String?   @map("parent_id") @db.Uuid
  sortOrder   Int       @default(0) @map("sort_order")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Self-referential relation for hierarchy
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  // Relations
  products ProductCategory[]

  @@map("categories")
}

// Products (shared with CMS)
model Product {
  id               String          @id @default(uuid()) @db.Uuid
  name             String          @db.VarChar(255)
  slug             String          @unique @db.VarChar(255)
  description      String?         @db.Text
  shortDescription String?         @map("short_description") @db.Text
  price            Decimal         @db.Decimal(10, 2)
  comparePrice     Decimal?        @map("compare_price") @db.Decimal(10, 2)
  sku              String?         @unique @db.VarChar(100)
  inventoryQuantity Int            @default(0) @map("inventory_quantity")
  weight           Decimal?        @db.Decimal(8, 2)
  dimensions       Json?           @db.JsonB
  status           ProductStatus   @default(DRAFT)
  featured         Boolean         @default(false)
  seoTitle         String?         @map("seo_title") @db.VarChar(255)
  seoDescription   String?         @map("seo_description") @db.Text
  createdBy        String          @map("created_by") @db.Uuid
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  // Relations
  categories    ProductCategory[]
  media         ProductMedia[]
  wishlistItems WishlistItem[]
  reviews       Review[]
  orderItems    OrderItem[]

  @@map("products")
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Product Categories (Many-to-Many)
model ProductCategory {
  productId  String @map("product_id") @db.Uuid
  categoryId String @map("category_id") @db.Uuid

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("product_categories")
}

// Media Files (shared with CMS)
model Media {
  id           String   @id @default(uuid()) @db.Uuid
  filename     String   @db.VarChar(255)
  originalName String   @map("original_name") @db.VarChar(255)
  mimeType     String   @map("mime_type") @db.VarChar(100)
  fileSize     Int      @map("file_size")
  width        Int?
  height       Int?
  altText      String?  @map("alt_text") @db.VarChar(255)
  folder       String   @default("uploads") @db.VarChar(255)
  createdBy    String   @map("created_by") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  products ProductMedia[]

  @@map("media")
}

// Product Media (Many-to-Many)
model ProductMedia {
  productId String  @map("product_id") @db.Uuid
  mediaId   String  @map("media_id") @db.Uuid
  sortOrder Int     @default(0) @map("sort_order")
  isPrimary Boolean @default(false) @map("is_primary")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  media   Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([productId, mediaId])
  @@map("product_media")
}

// E-commerce specific models
model WishlistItem {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  productId String   @map("product_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Review {
  id        String   @id @default(uuid()) @db.Uuid
  productId String   @map("product_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  rating    Int      @db.SmallInt
  title     String   @db.VarChar(255)
  comment   String   @db.Text
  verified  Boolean  @default(false)
  helpful   Int      @default(0)
  photos    String[] @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Order {
  id            String      @id @default(uuid()) @db.Uuid
  userId        String      @map("user_id") @db.Uuid
  status        OrderStatus @default(PENDING)
  total         Decimal     @db.Decimal(10, 2)
  subtotal      Decimal     @db.Decimal(10, 2)
  tax           Decimal     @db.Decimal(10, 2)
  shipping      Decimal     @db.Decimal(10, 2)
  shippingAddress Json      @map("shipping_address") @db.JsonB
  billingAddress  Json      @map("billing_address") @db.JsonB
  paymentMethod   String    @map("payment_method") @db.VarChar(50)
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model OrderItem {
  id        String  @id @default(uuid()) @db.Uuid
  orderId   String  @map("order_id") @db.Uuid
  productId String  @map("product_id") @db.Uuid
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  variant   Json?   @db.JsonB

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}
